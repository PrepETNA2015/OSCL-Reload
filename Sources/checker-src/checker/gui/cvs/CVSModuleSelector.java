/**
 * 
 *   Copyright (C) 2008 Lasse Parikka
 *
 *   This program is free software; you can redistribute it and/or modify it under the terms of
 *   the GNU General Public License as published by the Free Software Foundation; either version 2
 *   of the License, or (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 *   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 *   See the GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License along with this program;
 *   if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
 *   MA 02111-1307 USA
 *
 *   Also add information on how to contact you by electronic and paper mail.
 *
 */

package checker.gui.cvs;

import java.awt.Component;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.ListIterator;
import javax.swing.JTree;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeExpansionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeWillExpandListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.ExpandVetoException;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

import org.jdesktop.swingworker.SwingWorker;
import checker.repository.CVSRepository;
import checker.repository.SVNRepositoryEntry;
import checker.localization.Locale;



/**
 * Asks user to select which directory to checkout. 
 * Forms a directory tree from the repository.
 */
public class CVSModuleSelector extends javax.swing.JDialog
		implements TreeExpansionListener, TreeWillExpandListener, 
				TreeSelectionListener{

	public CVSRepository repository;
	public DefaultTreeModel treeModel;
	private boolean expandTask = true;
	private String selectedModulePath = "";
	private String selectedModuleName;
	
	/* Lozalization */
	private Locale loc = new Locale();


	/** Creates new form SVNDirSelector */
	public CVSModuleSelector(java.awt.Frame parent, boolean modal, 
			CVSRepository cvsRepository) {
		
		super(parent, modal);
		repository = cvsRepository;
		initComponents();
		
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		cancelButton = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();
		helpButton = new javax.swing.JButton();
		okButton = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		this.setTitle(loc.lc("Browse CVS repository"));
		DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(new DirName("", -2, ""));
		DefaultMutableTreeNode repo = new DefaultMutableTreeNode(new DirName(repository.getCVSRootPath(), 0, null));
		DefaultMutableTreeNode aliases = new DefaultMutableTreeNode(new DirName(loc.lc("Aliases"), 1, null));
		repo.add(new DefaultMutableTreeNode(new DirName(loc.lc("Pending..."), 2, null)));
		aliases.add(new DefaultMutableTreeNode(new DirName(loc.lc("Pending..."), 2, null)));
		
		rootNode.add(aliases);
		rootNode.add(repo);
		treeModel = new DefaultTreeModel(rootNode);
		tree = new JTree(treeModel);
		tree.getSelectionModel().setSelectionMode
        (TreeSelectionModel.SINGLE_TREE_SELECTION);
		tree.addTreeExpansionListener(this);
		tree.addTreeWillExpandListener(this);
		tree.addTreeSelectionListener(this);
		tree.setCellRenderer(new TreeRenderer());
		jScrollPane1.setViewportView(tree);


		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setName("Form"); // NOI18N

		cancelButton.setText(loc.lc("Cancel")); // NOI18N
		cancelButton.setName("cancelButton"); // NOI18N
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		jLabel1.setText(loc.lc("Repository contents") + ":"); // NOI18N
		jLabel1.setName("jLabel1"); // NOI18N

		helpButton.setText(loc.lc("Help")); // NOI18N
		helpButton.setEnabled(false);
		helpButton.setName("helpButton"); // NOI18N
		helpButton.setPreferredSize(new java.awt.Dimension(75, 25));

		okButton.setText(loc.lc("OK")); // NOI18N
		okButton.setName("okButton"); // NOI18N
		okButton.setPreferredSize(new java.awt.Dimension(75, 25));
		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});
		jScrollPane1.setName("jScrollPane1"); // NOI18N

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(okButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cancelButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(helpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jLabel1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(helpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cancelButton)
                    .add(okButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

		pack();
	}// </editor-fold>

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
		this.setVisible(false);
	}
	
	//user press ok button.
	private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {
		//set this dialog invisible
		this.setVisible(false);
	}


	public void treeCollapsed(TreeExpansionEvent arg0) {
		// TODO Auto-generated method stub

	}

	
	public void treeExpanded(TreeExpansionEvent arg0) {
		// TODO Auto-generated method stub

	}

	
	public void treeWillCollapse(TreeExpansionEvent event)
	throws ExpandVetoException {
		// TODO Auto-generated method stub

	}

	public void treeWillExpand(TreeExpansionEvent event)
	throws ExpandVetoException {
		if (expandTask == true) {
        		TreePath path = event.getPath();
        		Object lastPathComponent = path.getLastPathComponent();
        		DefaultMutableTreeNode node = (DefaultMutableTreeNode)lastPathComponent;
        	    OpenTask newTask = new OpenTask(node);
        		//show "pending" text to the user 
        		//if module's content is not yet loaded
        		newTask.execute();
        	
		}

	}
	
	/**
	 * Item selection listener.
	 */
	public void valueChanged(TreeSelectionEvent arg0) {
		
		//Returns the last path element of the selection.
		DefaultMutableTreeNode node = (DefaultMutableTreeNode)
		      tree.getLastSelectedPathComponent();
		if (node != null ) {
			DirName selected = (DirName) node.getUserObject();
			this.selectedModulePath = selected.getPath();
			this.selectedModuleName = selected.toString();
			
		
		}
		
	}
	

	/**
	 * Returns the selected module path.
	 */
	public String getSelectedModulePath() {
		return selectedModulePath;
	}
	
	/**
	 * Returns the selected module name.
	 */
	public String getSelectedModuleName() {
		return selectedModuleName;
	}
	

	/**
	 * Worker thread that loads the module entries in 
	 * expanded module.
	 */
	class OpenTask extends SwingWorker<DefaultMutableTreeNode, Void> {

	
		private DefaultMutableTreeNode expand;
		
		public OpenTask(DefaultMutableTreeNode e) {
			expand = e;
		}

		
		protected DefaultMutableTreeNode doInBackground() throws Exception {
			
			DefaultMutableTreeNode firstleaf = (DefaultMutableTreeNode)expand.getChildAt(0);
			DirName nodeName = (DirName) firstleaf.getUserObject();
			ArrayList<String> modules = null;
			
			
			if (nodeName.getId() == 2) {
				
				DirName userObject = (DirName) expand.getUserObject();
				String module = userObject.getPath();
				
				//cvs root
				if (userObject.getId() == 0)
					module = "";
			    //aliases
				if (userObject.getId() == 1) {
					modules = repository.listAliases();
					Collections.sort(modules, new ModuleComparator());
				}
				else {
					modules = repository.listModules(module);
					Collections.sort(modules, new ModuleComparator());
				}
				ListIterator<String> litr = modules.listIterator();
				while (litr.hasNext()) {
					
					String moduleName = litr.next();
					DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(new 
								DirName(moduleName, -1, module.equals("") ? moduleName: module + "/" + moduleName));
					newNode.add(new DefaultMutableTreeNode(new DirName(loc.lc("Pending..."), 2, null)));
					treeModel.insertNodeInto(newNode, expand, treeModel.getChildCount(expand));
					
					
				}
				treeModel.removeNodeFromParent((DefaultMutableTreeNode)expand.getChildAt(0));
			
				
			}
			
			
			
			return null;
		}

	}
	/**
	 * Renders the loading text("pending...") without icon.
	 */
	private class TreeRenderer extends DefaultTreeCellRenderer {


		public Component getTreeCellRendererComponent(
				JTree tree,
				Object value,
				boolean sel,
				boolean expanded,
				boolean leaf,
				int row,
				boolean hasFocus) {

			super.getTreeCellRendererComponent(
					tree, value, sel,
					expanded, leaf, row,
					hasFocus);
			if (leaf && isLoadingText(value)) {
				setIcon(null);
			}
			else
				setIcon(this.getDefaultClosedIcon());
				
			return this;
		}

		protected boolean isLoadingText(Object value) {
			DefaultMutableTreeNode node =
				(DefaultMutableTreeNode)value;
			DirName nodeName = (DirName) node.getUserObject();
			if (nodeName.toString().equals(loc.lc("Pending...")) && nodeName.getId() == 2) {
				return true;
			} 

			return false;
		}
	}
	
	public class ModuleComparator implements Comparator<String>{

		//@Override
		public int compare(String arg0, String arg1) {
			return  (arg0.toLowerCase().compareTo(arg1.toLowerCase()));
		}

	
		
	}
	
	/**
	 * Represents a module in the module tree.
	 */
	public class DirName  {

		String name;
		int identifier;
		//path relative to cvs root.
		String path;
		
		public DirName(String e1, int e2, String e3) {
			name = e1;
			identifier = e2;
			path = e3;
			
		}
		
		public String toString() {
			return name;
		}
		
		
		public Integer getId() { return identifier; }
		public String getPath() {return path; }

		
	}
	
	

	// Variables declaration - do not modify
	private javax.swing.JButton cancelButton;
	private javax.swing.JButton helpButton;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JButton okButton;
	private JTree tree;
	// End of variables declaration

	
}
