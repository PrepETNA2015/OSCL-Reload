
/*
 * AddLicenseDialog.java
 *
 * Created on 26.1.2009, 15:03:07
 */

package checker.gui.license;

import checker.gui.TableSorter;
import java.awt.CardLayout;
import checker.gui.table.SelectLicensesTableModel;
import checker.license.LicenseWriter;
import checker.localization.Locale;
import javax.swing.JOptionPane;

/**
 *
 * @author ekurkela
 */
public class AddLicenseWizard extends javax.swing.JDialog {

    private static Locale loc = new Locale();
    private SelectLicensesTableModel addLicenseTableModel;
    private int currentCard = 0;
    private static String[] cardTitle = {loc.lc("Enter license name and text"),
					loc.lc("Select compatible licenses")};

    /** Creates new form AddLicenseDialog */
    public AddLicenseWizard(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        addLicenseTableModel = new SelectLicensesTableModel();
        //replaced with code using TableSorter licenseTable.setModel(addLicenseTableModel);
        TableSorter selectLicensesTableSorter = new TableSorter(addLicenseTableModel);
		licenseTable.setModel(selectLicensesTableSorter);
		selectLicensesTableSorter.setTableHeader(licenseTable.getTableHeader());
        // hide column containing license objects
        licenseTable.removeColumn(licenseTable.getColumnModel().getColumn(0));

        showCard(currentCard);
    }

    /* validates input */
    public boolean validateCard(int n) {
        boolean valid = true;

        if(n == 0) {
            String licenseNameString = alLicenseNameTextField.getText();
            String licenseTextString = alLicenseTextTextArea.getText();
            LicenseWriter licenseWriter = new LicenseWriter(licenseNameString, licenseTextString);
            //fix for license name already existing check -jpkheikk 20090213
            String licenseIDName = licenseWriter.getLicenseIDName(licenseNameString, alLicenseTypeComboBox.getSelectedIndex(), 0); //jpkheikk 20090213
            /**
             * Check if a license with the same name already exists or license text is empty.
             */
            if(licenseWriter.isLicenseExisting(licenseIDName)) {
                // inform the user about the existence of a license with same name
                JOptionPane.showMessageDialog(this,
                        loc.lc("License with that name already exists!"),
                        loc.lc("Error"), JOptionPane.ERROR_MESSAGE);
                valid = false;
            } else if (licenseNameString.length() < 1) {
                // license name is null -> report invalid input
                JOptionPane.showMessageDialog(this,
                        loc.lc("License name is empty"),
                        loc.lc("Error"), JOptionPane.ERROR_MESSAGE);
                //System.out.println(loc.lc("ERROR: license name is null"));
                valid = false;
            } else if (licenseTextString.length() < 1) {
                // license text is null -> report invalid input
                JOptionPane.showMessageDialog(this,
                        loc.lc("License text is empty"),
                        loc.lc("Error"), JOptionPane.ERROR_MESSAGE);
                //System.out.println(loc.lc("ERROR: license text is null"));
                valid = false;
            }
        }

        return valid;
    }

    /* switches between steps of wizard */
    public void showCard(int n) {
        CardLayout cl = (CardLayout)(alMainPanel.getLayout());

        if(n == 0) {
           alBackButton.setEnabled(false);
           alNextButton.setEnabled(true);
           alFinishButton.setEnabled(false);
        }
        else if(n == 1) {
           alBackButton.setEnabled(true);
           alNextButton.setEnabled(false);
           alFinishButton.setEnabled(true);
        }

        //show card
        cl.show(alMainPanel, Integer.toString(n));

        //update card title
        alTitleLabel.setText(this.cardTitle[n]);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        alBackButton = new javax.swing.JButton();
        alNextButton = new javax.swing.JButton();
        alCancelButton = new javax.swing.JButton();
        alFinishButton = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JSeparator();
        alMainPanel = new javax.swing.JPanel();
        alFirstPanel = new javax.swing.JPanel();
        alLicenseNameLabel = new javax.swing.JLabel();
        alLicenseNameTextField = new javax.swing.JTextField();
        alLicenseTextLabel = new javax.swing.JLabel();
        alLicenseTextScrollPane = new javax.swing.JScrollPane();
        alLicenseTextTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        alLicenseTypeComboBox = new javax.swing.JComboBox();
        alSecondPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        licenseTable = new javax.swing.JTable();
        alSelectAllButton = new javax.swing.JButton();
        alSelectNoneButton = new javax.swing.JButton();
        alInvertSelectionButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        alTitleLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(loc.lc("Add new license"));

        alBackButton.setText(loc.lc("Back"));
        alBackButton.setEnabled(false);
        alBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alBackButtonActionPerformed(evt);
            }
        });

        alNextButton.setText(loc.lc("Next"));
        alNextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alNextButtonActionPerformed(evt);
            }
        });

        alCancelButton.setText(loc.lc("Cancel"));
        alCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alCancelButtonActionPerformed(evt);
            }
        });

        alFinishButton.setText(loc.lc("Finish"));
        alFinishButton.setEnabled(false);
        alFinishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alFinishButtonActionPerformed(evt);
            }
        });

        alMainPanel.setLayout(new java.awt.CardLayout());

        alLicenseNameLabel.setText(loc.lc("License name"));

        alLicenseTextLabel.setText(loc.lc("License text"));

        alLicenseTextTextArea.setColumns(20);
        alLicenseTextTextArea.setRows(5);
        alLicenseTextScrollPane.setViewportView(alLicenseTextTextArea);

        jLabel1.setText(loc.lc("License type"));

        alLicenseTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { loc.lc("Normal"), loc.lc("Short version"), loc.lc("Long version"), loc.lc("Forbidden phrase") }));
        alLicenseTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alLicenseTypeComboBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout alFirstPanelLayout = new org.jdesktop.layout.GroupLayout(alFirstPanel);
        alFirstPanel.setLayout(alFirstPanelLayout);
        alFirstPanelLayout.setHorizontalGroup(
            alFirstPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(alFirstPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(alFirstPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(alFirstPanelLayout.createSequentialGroup()
                        .add(alLicenseNameLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(alLicenseNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 208, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(alFirstPanelLayout.createSequentialGroup()
                        .add(alLicenseTextLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(alLicenseTextScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 512, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(alFirstPanelLayout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(alLicenseTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 197, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        alFirstPanelLayout.linkSize(new java.awt.Component[] {alLicenseNameLabel, alLicenseTextLabel, jLabel1}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        alFirstPanelLayout.linkSize(new java.awt.Component[] {alLicenseNameTextField, alLicenseTextScrollPane}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        alFirstPanelLayout.setVerticalGroup(
            alFirstPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(alFirstPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(alFirstPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(alLicenseNameLabel)
                    .add(alLicenseNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(alFirstPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(alLicenseTextLabel)
                    .add(alLicenseTextScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(alFirstPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(alLicenseTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        alMainPanel.add(alFirstPanel, "0");

        licenseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                loc.lc("License"), "Compatible"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        licenseTable.setShowVerticalLines(false);
        jScrollPane2.setViewportView(licenseTable);

        alSelectAllButton.setText(loc.lc("Select all"));
        alSelectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alSelectAllButtonActionPerformed(evt);
            }
        });

        alSelectNoneButton.setText(loc.lc("Select none"));
        alSelectNoneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alSelectNoneButtonActionPerformed(evt);
            }
        });

        alInvertSelectionButton.setText(loc.lc("Invert selection"));
        alInvertSelectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alInvertSelectionButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout alSecondPanelLayout = new org.jdesktop.layout.GroupLayout(alSecondPanel);
        alSecondPanel.setLayout(alSecondPanelLayout);
        alSecondPanelLayout.setHorizontalGroup(
            alSecondPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(alSecondPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(alSecondPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
                    .add(alSecondPanelLayout.createSequentialGroup()
                        .add(alSelectAllButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(alSelectNoneButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(alInvertSelectionButton)))
                .addContainerGap())
        );

        alSecondPanelLayout.linkSize(new java.awt.Component[] {alInvertSelectionButton, alSelectAllButton, alSelectNoneButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        alSecondPanelLayout.setVerticalGroup(
            alSecondPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, alSecondPanelLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 287, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(alSecondPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(alSelectAllButton)
                    .add(alSelectNoneButton)
                    .add(alInvertSelectionButton))
                .add(43, 43, 43))
        );

        alMainPanel.add(alSecondPanel, "1");

        alTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        alTitleLabel.setText(loc.lc("Enter license name and text"));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(344, Short.MAX_VALUE)
                .add(alBackButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(alNextButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(alCancelButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(alFinishButton)
                .addContainerGap())
            .add(jSeparator7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 606, Short.MAX_VALUE)
            .add(alMainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 606, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(alTitleLabel)
                .addContainerGap(438, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(16, 16, 16)
                .add(alTitleLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(alMainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(alFinishButton)
                    .add(alCancelButton)
                    .add(alNextButton)
                    .add(alBackButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void alBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alBackButtonActionPerformed
        int newCard = currentCard - 1;
        if(newCard >= 0 && newCard <= cardTitle.length) {
            //update current card
            currentCard--;
            
            // show card
            this.showCard(currentCard);
        }
}//GEN-LAST:event_alBackButtonActionPerformed

    private void alCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alCancelButtonActionPerformed
        dispose();
}//GEN-LAST:event_alCancelButtonActionPerformed

    private void alNextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alNextButtonActionPerformed
        if(this.validateCard(currentCard)) {
            int newCard = currentCard + 1;
            if(newCard >= 0 && newCard <= cardTitle.length) {
                //update current card
                currentCard++;

                // show card
                this.showCard(currentCard);
            }
        }
    }//GEN-LAST:event_alNextButtonActionPerformed

    private void alFinishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alFinishButtonActionPerformed
        String licenseNameString = alLicenseNameTextField.getText();
        String licenseTextString = alLicenseTextTextArea.getText();
        LicenseWriter licenseWriter = new LicenseWriter(licenseNameString, licenseTextString);
        //fix for license name already existing check -jpkheikk 20090213
        String licenseIDName = licenseWriter.getLicenseIDName(licenseNameString, alLicenseTypeComboBox.getSelectedIndex(), 0); //jpkheikk 20090213
        int selectedCount = 0;
        /* jpkheikk, modified/ekurkela */
        // counting the amount of selections
        for (int i = 0; i < addLicenseTableModel.getRowCount(); i++) {
            if (addLicenseTableModel.getValueAt(i, 2).equals(true)) {
                selectedCount++;
            }
        }

        // adding the selections to a String table of correct size
        String[] compatibleLicenses = new String[selectedCount];

        //System.out.println("SelectedCount: " + selectedCount);
        int j = 0;
        for (int i = 0; i < addLicenseTableModel.getRowCount(); i++) {
            if (addLicenseTableModel.getValueAt(i, 2).equals(true)) {
                compatibleLicenses[j] = addLicenseTableModel.getLicenseAt(i).getId();
                j++;
            }
        }

        // Creating a JOptionPane to allow user to select whether to create the license or not.
        int answer = JOptionPane.showConfirmDialog(this,
                String.format(loc.lc("Create license %s?"), licenseNameString),
                loc.lc("Add new license?"), JOptionPane.YES_NO_OPTION);
        if (answer == JOptionPane.YES_OPTION) {
            // if user answers yes: the .txt and .meta files are created for the new license
            int tag = alLicenseTypeComboBox.getSelectedIndex();
            licenseWriter = new LicenseWriter(licenseNameString, licenseTextString, tag);
            licenseWriter.writeLicense();
            licenseWriter = new LicenseWriter(licenseNameString, compatibleLicenses, compatibleLicenses.length, tag);
            licenseWriter.writeMetaFile();

            //dispose
            dispose();
        }
    /* end */
        
    }//GEN-LAST:event_alFinishButtonActionPerformed

    private void alSelectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alSelectAllButtonActionPerformed
        for (int i = 0; i < addLicenseTableModel.getRowCount(); i++) {
            addLicenseTableModel.setValueAt(true, i, 2);
        }
    }//GEN-LAST:event_alSelectAllButtonActionPerformed

    private void alSelectNoneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alSelectNoneButtonActionPerformed
        for (int i = 0; i < addLicenseTableModel.getRowCount(); i++) {
            addLicenseTableModel.setValueAt(false, i, 2);
        }
    }//GEN-LAST:event_alSelectNoneButtonActionPerformed

    private void alInvertSelectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alInvertSelectionButtonActionPerformed
        for (int i = 0; i < addLicenseTableModel.getRowCount(); i++) {
            addLicenseTableModel.setValueAt(!addLicenseTableModel.getValueAt(i, 2).equals(true), i, 2);
        }
    }//GEN-LAST:event_alInvertSelectionButtonActionPerformed

    private void alLicenseTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alLicenseTypeComboBoxActionPerformed

    }//GEN-LAST:event_alLicenseTypeComboBoxActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddLicenseWizard dialog = new AddLicenseWizard(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton alBackButton;
    private javax.swing.JButton alCancelButton;
    private javax.swing.JButton alFinishButton;
    private javax.swing.JPanel alFirstPanel;
    private javax.swing.JButton alInvertSelectionButton;
    private javax.swing.JLabel alLicenseNameLabel;
    private javax.swing.JTextField alLicenseNameTextField;
    private javax.swing.JLabel alLicenseTextLabel;
    private javax.swing.JScrollPane alLicenseTextScrollPane;
    private javax.swing.JTextArea alLicenseTextTextArea;
    private javax.swing.JComboBox alLicenseTypeComboBox;
    private javax.swing.JPanel alMainPanel;
    private javax.swing.JButton alNextButton;
    private javax.swing.JPanel alSecondPanel;
    private javax.swing.JButton alSelectAllButton;
    private javax.swing.JButton alSelectNoneButton;
    private javax.swing.JLabel alTitleLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTable licenseTable;
    // End of variables declaration//GEN-END:variables

}
