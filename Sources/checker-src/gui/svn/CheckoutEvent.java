/**
 * 
 *   Copyright (C) 2008 Lasse Parikka
 *
 *   This program is free software; you can redistribute it and/or modify it under the terms of
 *   the GNU General Public License as published by the Free Software Foundation; either version 2
 *   of the License, or (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 *   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 *   See the GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License along with this program;
 *   if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
 *   MA 02111-1307 USA
 *
 *   Also add information on how to contact you by electronic and paper mail.
 *
 */
package checker.gui.svn;

import org.jdesktop.swingworker.SwingWorker;
import org.tmatesoft.svn.core.SVNCancelException;
import org.tmatesoft.svn.core.SVNException;
import org.tmatesoft.svn.core.wc.ISVNEventHandler;
import org.tmatesoft.svn.core.wc.SVNEvent;
import org.tmatesoft.svn.core.wc.SVNEventAction;

import checker.repository.SVNRepositoryPackage;
import checker.localization.Locale;

/**
 * the CheckoutEvent class shows progress information
 * about checkout operation.
 * 
 * @author lparikka
 *
 */
public class CheckoutEvent extends javax.swing.JDialog {


	private SVNRepositoryPackage svnPackage;
	private String url;
	private String localFolder;
	private CheckoutTask task; 
	private boolean checkoutInterrupted = true;
	private boolean checkoutCancelled = false;
	private javax.swing.JDialog parentDialog;
    /* Localization file */
    public Locale loc = new Locale();

	/** Creates new form CheckoutEvent */
	public CheckoutEvent(SVNCheckoutWizard wizard, java.awt.Frame parent, boolean modal, 
			SVNRepositoryPackage svnPack, String url,
			String localFolder) {

		super(parent, modal);
		parentDialog = this;
		this.setTitle(this.loc.lc("SVN checkout"));
		svnPackage = svnPack;
		initComponents();
		this.url = url;
		this.localFolder = localFolder;
		task = new CheckoutTask(url, localFolder);
		task.execute();
		this.setLocationRelativeTo(wizard);
		this.setVisible(true);

	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jProgressBar1 = new javax.swing.JProgressBar();
		cancelButton = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();
		jLabel1 = new javax.swing.JLabel();
		okButton = new javax.swing.JButton();
		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setName("Form"); // NOI18N

		jProgressBar1.setName("jProgressBar1"); // NOI18N

		cancelButton.setText(loc.lc("Cancel")); // NOI18N
		cancelButton.setName("cancelButton"); // NOI18N
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButton1ActionPerformed(evt);
			}
		});
		jScrollPane1.setName("jScrollPane1"); // NOI18N

		jTextArea1.setColumns(25);
		jTextArea1.setRows(8);
		jTextArea1.setName("jTextArea1"); // NOI18N
		jTextArea1.setEditable(false);
		jScrollPane1.setViewportView(jTextArea1);

		jLabel1.setText(loc.lc("Checking out...")); // NOI18N
		jLabel1.setName("jLabel1"); // NOI18N
		okButton.setText(loc.lc("OK")); // NOI18N
		okButton.setEnabled(false);
		okButton.setName("okButton"); // NOI18N
		okButton.setPreferredSize(new java.awt.Dimension(75, 25));
		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
						.addContainerGap()
						.add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
								.add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
								.add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
										.add(jLabel1)
										.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 203, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
										.add(okButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
										.add(cancelButton)))
										.addContainerGap())
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
						.addContainerGap()
						.add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
						.addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
						.add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
								.add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
										.add(cancelButton)
										.add(okButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
										.add(layout.createSequentialGroup()
												.add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
														.add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
														.add(jLabel1))
														.add(1, 1, 1)))
														.addContainerGap())
		);

		pack();
	}// </editor-fold>



	/**
	 * Cancel button event handler. 
	 */
	private void cancelButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                              
		checkoutCancelled = true;
		task.cancel(true);
	} 

	public boolean isCancelled() {
		return checkoutCancelled || checkoutInterrupted;
	}
	/**
	 * closes the dialog.
	 */
	private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
		this.setVisible(false);
	} 

	// Variables declaration - do not modify
	private javax.swing.JButton cancelButton;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JProgressBar jProgressBar1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextArea jTextArea1;
	private javax.swing.JButton okButton;
	// End of variables declaration

	/**
	 * A worker thread that checkout a folder from
	 * the repository.
	 */
	class CheckoutTask extends SwingWorker<Void, Void> {

		private String url;
		private String localFolder;
		private boolean failed = false;
		private String message;

		public CheckoutTask(String ur, String localFold) {
			url = ur;
			localFolder = localFold;
		}

		protected Void doInBackground() throws Exception {

			CheckoutEventHandler eventHandler = new CheckoutEventHandler();

			jProgressBar1.setIndeterminate(true);
			try {
				long revision = svnPackage.checkoutFromRepository(localFolder, url, 
						eventHandler);
				jTextArea1.append(loc.lc("Checked out revision") + " " + revision+ "\n");
				jTextArea1.setCaretPosition(jTextArea1.getDocument()
						.getLength());


			} catch (Exception e) {
				failed = true;
				message = e.getMessage();
				checkoutCancelled = true;
				

			}
			return null;
		}

		protected void done() {

			if (failed == true) {
				javax.swing.JOptionPane.showMessageDialog(parentDialog,
						message,
						loc.lc("SVN command failed"),
						javax.swing.JOptionPane.ERROR_MESSAGE);
			}
			checkoutInterrupted = false;
			cancelButton.setEnabled(false);
			jProgressBar1.setIndeterminate(false);
			jProgressBar1.setVisible(false);
			jLabel1.setVisible(false);
			okButton.setEnabled(true);

		}

	}


	/**
	 * Handles events generated by svnclient during
	 * the checkout operation.
	 */
	public class CheckoutEventHandler implements ISVNEventHandler{

		public void handleEvent(SVNEvent arg0, double arg1) throws SVNException {

			//SVNEventAction action = arg0.getAction();

			jTextArea1.append("A     " + arg0.getFile().getPath() + "\n");
			jTextArea1.setCaretPosition(jTextArea1.getDocument()
					.getLength());

		}

		/**
		 * Checks if the current operation is cancelled. 
		 */
		public void checkCancelled() throws SVNCancelException {
			if (checkoutCancelled)
				throw new SVNCancelException();
		}
	}
}
